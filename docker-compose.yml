version: '3.8'


services:
  bot:
    build: .  # Create image with Dockerfile
    environment:
      - PYTHONUNBUFFERED=1  # See logs in real-time
      - DEBUG=${DEBUG}  # true, false
      - ENVIRONMENT=${ENVIRONMENT}  # production, staging, development
      - SENTRY_DSN=${SENTRY_DSN}  # Remote error logging (https://examplePublicKey@o0.ingest.sentry.io/0)
      - BOT_TOKEN=${BOT_TOKEN}
      - DEVELOPER_CHAT_ID=${DEVELOPER_CHAT_ID}
      - DB_USER=songid_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=songid_db
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  db:
    image: postgres:16.4
    environment:
      - POSTGRES_USER=songid_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=songid_db
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z  # Store database data in a named volume
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d songid_db -U songid_user'"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

volumes:
  postgres_data:
